from interstate import State, Timeline

assert = require('assert')


"""
Basic Timeline Tests:

    These tests test the features of a timeline object in a vacuum, as if all
    assignments and uses happen in the same scope. We're not yet concerned with
    tracking this timeline through scopes.
"""

# lax variable timeline is based on observed assignments
lax = Timeline('foo', 'Number') # initialize to Number
assert(lax.canAlwaysUseFor('Number'))           # allowed

lax.setVar('String')                            # assign String to var (no error)
assert(lax.canUseFor('Number'))                 # allowed
assert(lax.canUseFor('String'))                 # allowed
assert(not lax.canUseFor('Boolean'))            # not allowed
assert(not lax.canAlwaysUseFor('Number'))       # not allowed, because it could be a String
num = Timeline('num', 'Number')
assert.throws(
    def():                                      # not allowed because neither String nor Number can be used as a function
        lax.addCall({
            inputs: [num]
        })
    ,
    /not a callable object/
)
lax.setVar({
    type: 'Function',
    inputs: ['Number'],
    returns: ['Number']
})
assert(lax.addCall({                            # allowed because of above setVar, also check that it gives us number return type
    inputs: [num]
}) == [{
    type: 'Number'
}])
assert.throws(
    def():                                      # not allowed because inputs don't match
        lax.addCall({
            inputs: []
        })
    ,
    /allowed signatures/
)

# function signature checks
nested = Timeline('baz', {
    type: 'Function',
    inputs: ['Number', 'Number'],
    returns: ['Beans', 'Nuts']
})
assert.throws(
    def():                                      # not allowed because inputs don't match
        lax.addCall({
            inputs: [nested]
        }, 'biz')
    ,
    /allowed signatures/
)
lax.setVar({                                    # declare correct nested function
    type: 'Function',
    inputs: [{
        type: 'Function',
        inputs: ['Number', 'Number'],
        returns: ['Beans', 'Nuts']
    }],
    returns: ['Apples']
})
assert(lax.addCall({                            # try again, now this call is allowed - and the output is of type Apples
    inputs: [nested]
}, 'biz') == [{
    type: 'Apples'
}])

# strict variable timeline is based on enforced assignments
strict = Timeline('foo', 'Number', ['Number', 'Boolean'])
strict.setVar('Number')                         # allowed
strict.setVar('Boolean')                        # allowed
assert.throws(
    def():                                      # not allowed because it's not one of declared types
        strict.setVar('String')
    ,
    /Can't assign value of type/
)


"""
State Tests:

    These tests test the interaction of state and timelines, how timelines are generated
    based on current state and how they can be manipulated.
"""
s = State()                                     # initialize the global state

# lax scope
s.newScope('function', 'foo')                   # start declaration of a new function named 'foo'
s.newScope('if')
s.setReturn('RegExp')                           # add a return of type RegExp to current scope
s.nextScopeStage()
s.setReturn('String')                           # add a return of type String to current scope
s.endScope()                                    # pop the scope, ending conditional
# undefined should get added too, because this wasn't a conditional that had a final scope
s.endScope()                                    # pop the scope, in turn generating a 'foo' function in parent scope
lax1 = s.getTimeline('foo')                     # retrieve the timeline of a 'foo' object, which maps to the function we declared
boolean = Timeline('boolean', 'Boolean')

assert(lax1.addCall({                           # allowed because our function definition was vague and did not specify inputs
    inputs: [num, boolean]
}) == [{
    type: 'RegExp'
}, {
    type: 'String'
}, {
    type: 'Undefined'
}])                                             # the possible outputs match up with what we declared while generating the scope

# strict scope
def setupBar():
    s.newScope('function', 'bar', {             # this time we specify a function annotation
        inputs: ['Number'],
        returns: ['String', 'Number']           # state won't be happy until it observes BOTH of these in return statements
    })
    s.setArgs([{ name: 'z' }])
setupBar()
assert.throws(
    def():                                      # trying to add an incompatible return to the scope will raise an error
        s.setReturn('Boolean')
    ,
    /Annotation states that function returns/
)
assert.throws(
    def():                                      # trying to end scope without a return specified by annotation will raise an error
        s.endScope()
    ,
    /Annotation states that function returns/
)

setupBar()                                      # rerun setup because previous assert broke our scope
s.newScope('if')
s.setReturn('Number')                           # number is allowed
s.nextScopeStage()
s.setReturn('Number')                           # multiple returns of same type are allowed
assert.throws(
    def():                                      # error, didn't close that conditional, resulting in possibility of Undefined return
        s.endScope()
    ,
    /Annotation states that function returns/
)

# try again with only the Number return
setupBar()
s.setReturn('Number')
assert.throws(
    def():                                      # error, still missing String return
        s.endScope()
    ,
    /Annotation states that function returns/
)

# try again, this time it should work
setupBar()
s.newScope('if')
s.setReturn('Number')
s.nextScopeStage(True)                          # declare the stage as final to eliminate Undefined return possibility
s.setReturn('String')
s.endScope()
s.endScope()

# now let's try to get that timeline and use it
strict1 = s.getTimeline('bar')
string = Timeline('string', 'String')
assert.throws(
    def():                                      # error, using it with wrong input
        strict1.addCall({
            inputs: [string]
        })
    ,
    /allowed signatures/
)

assert(strict1.addCall({                        # allowed call results in correct return list
    inputs: [num]
}) == [{
    type: 'Number'
}, {
    type: 'String'
}])


# CLASSES
s.newScope('class', 'Human')                    # start a new class
s.setParent('Animalia')                         # inherit from an unknown class, ok because it could come from external libs
s.endScope()                                    # finish class declaration

# build/initialize a variable to an instance of Human class
jack = Timeline('jack', s.getTimeline('Human').addCall({
    inputs: []
})[0])
assert(jack.getSignature() == [{                # signature states correct return type
    type: 'Human',
    parent: {
        type: 'Animalia',
        external: True
    }
}])

# build a new class
s.newScope('class', 'Scientist')
s.setParent('Human')
s.endScope()

# declare tom to be an instance of this class
tom = Timeline('tom', s.getTimeline('Scientist').addCall({
    inputs: []
})[0])
tom.setVar('Number')                            # tom can now be a number, possibly incompatible with the class we originally expected

# declare yet another class
s.newScope('class', 'Physicist')
s.setParent('Scientist')
s.endScope()

einstein = Timeline('einstein', s.getTimeline('Physicist').addCall({
    inputs: []
})[0])

assert(jack.canAlwaysUseFor('Human'))           # self - yes
assert(not jack.canAlwaysUseFor('Scientist'))   # child - no
assert(tom.canUseFor('Human'))                  # parent - yes
assert(not tom.canAlwaysUseFor('Human'))        # no, ambiguity between Human and Number
assert(einstein.canAlwaysUseFor('Animalia'))    # grandparent - yes


# SHADOWING AND SCOPE CONTROL
s.newScope('function')
s.setVar('hello', 'String', ['String'])         # in this scope hello can only be string
assert.throws(
    def():                                      # number assignment will fail
        s.setVar('hello', 'Number')
    ,
    /Can't assign value of type/
)
assert.throws(
    def():                                      # can't relax earlier declaration either
        s.setVar('hello', 'Number', ['Number', 'String'])
    ,
    /conflicts with earlier format/
)
s.setVar('hello', 'String')                     # reassignment of same type allowed
# -- nested scope
s.newScope('function')
s.setVar('hello', 'Number')                     # assignment allowed (shadowed variable)
s.endScope()
# -- end nested scope
assert.throws(
    def():                                      # number assignment still fails (shadowing over)
        s.setVar('hello', 'Number')
    ,
    /Can't assign value of type/
)
# -- nested scope #2
s.newScope('function')
s.markNonLocal('hello')                         # this time we disable shadowing
assert.throws(
    def():                                      # number assignment now fails even in nested scope
        s.setVar('hello', 'Number')
    ,
    /Can't assign value of type/
)
s.endScope()
# -- end nested scope
# -- nested scope #3
s.newScope('function')
assert(s.getTimeline('hello').getSignature() == [{type: 'String'}]) # no assignment this time, hence we reference outer scope
s.endScope()
# -- end nested scope
s.endScope()


# FUNCTION CALLS
# now test function input signature
s.newScope('function', 'bar1')

assert.throws(
    def():
        s.setArgs(['a', 'b', 'c'])
    ,
    /Invalid format/
)

assert.throws(
    def():
        s.setArgs([{ name: 'a', default: 'test' }, { name: 'b' }, { name: 'c' }])
    ,
    /Arguments with default values must come last/
)

s.setArgs([{ name: 'a' }, { name: 'b' }, { name: 'c', default: 'test' }])
assert.throws(
    def():
        s.setArgs([{ name: 'a' }, { name: 'b' }, { name: 'c' }])
    ,
    /Redeclaration of arguments/
)

s.endScope()

# now test function calls
# extra args not allowed
assert.throws(
    def():
        s.addCall('bar1', {
            inputs: [num, num, num, num]
        })
    ,
    /allowed signatures/
)
# nor missing args
assert.throws(
    def():
        s.addCall('bar1', {
            inputs: [num]
        })
    ,
    /allowed signatures/
)
# unless they're optional
s.addCall('bar1', {
    inputs: [num, num]
})
# normal call allowed
s.addCall('bar1', {
    inputs: [num, num, num]
})

# try redeclaration
s.onWarning(def(message):
   raise message
)
s.newScope('function', 'bar1')
s.setArgs([{ name: 'z' }])
assert.throws(
    def():
        s.endScope()
    ,
    /Redefining earlier declaration/
)


'''
now let's try compile-time kwargs resolution:

def bar1(a, b, c):  # already declared
    ...

bar1(c=num, a, b)       # error
bar1(a, b, a=num)       # error
bar1(a, c=num, b=num)   # ok
'''
assert.throws(
    def():
        print(s.alignInputs('bar1', [
            { name: 'c', data: num },
            { data: num },
            { data: num }
        ]))
    ,
    /Non-keyword argument after keyword argument/
)
assert.throws(
    def():
        print(s.alignInputs('bar1', [
            { data: num },
            { data: num },
            { name: 'a', data: num }
        ]))
    ,
    /got multiple values for keyword argument/
)
assert([input.data for input in s.alignInputs('bar1', [
    { data: 'foo' },
    { name: 'c', data: 'baz' },
    { name: 'b', data: 'bar' }
])] == ['foo', 'bar', 'baz'])

# now let's create a situation where at the time of declaration the signature for a variable is invalid, but at the time of a call it is
'''
def qux(d:Number):
    pass

a = 'foo'
def baz(b:Number, c:Number) -> Number:
    qux(a)
    return b + c

a = 4
baz(1, 2)
'''
s.newScope('function', 'qux', {
    inputs: ['Number'],
    returns: []
})
s.setArgs([{ name: 'd' }])
s.endScope()
s.setVar('a', 'String')
s.newScope('function', 'baz', {
    inputs: ['Number', 'Number'],
    returns: ['Number']
})
s.setArgs([{ name: 'b' }, { name: 'c' }])
# direct call fails
assert.throws(
    def():
        s.addCall('qux', {
            inputs: [s.getTimeline('a')]
        })
    ,
    /allowed signatures/
)
# delayed call succeeds
s.onCall(def(callSignature):
    s.addCall('qux', {
        inputs: [s.getTimeline('a')]
    })
)
s.setReturn('Number')
s.endScope()
s.setVar('a', 'Number')
s.addCall('baz', {
    inputs: [num, num]
})


print('ALL TESTS PASSED')
# test(foo: Number, callback: Function(Number, Number) -> Number) -> Number
